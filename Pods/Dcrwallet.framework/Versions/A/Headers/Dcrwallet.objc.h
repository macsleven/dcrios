// Objective-C API for talking to github.com/decred/dcrwallet Go package.
//   gobind -lang=objc github.com/decred/dcrwallet
//
// File is generated by gobind. Do not edit.

#ifndef __Dcrwallet_H__
#define __Dcrwallet_H__

@import Foundation;
#include "Universe.objc.h"


@class DcrwalletAccount;
@class DcrwalletAccounts;
@class DcrwalletBalance;
@class DcrwalletConstructTxResponse;
@class DcrwalletTransaction;
@class DcrwalletTransactionCredit;
@class DcrwalletTransactionDebit;
@protocol DcrwalletBlockScanResponse;
@class DcrwalletBlockScanResponse;
@protocol DcrwalletTransactionListener;
@class DcrwalletTransactionListener;

@protocol DcrwalletBlockScanResponse <NSObject>
- (void)onEnd:(long)height;
- (void)onScan:(long)rescanned_through;
@end

@protocol DcrwalletTransactionListener <NSObject>
- (void)onTransactionReceived;
@end

@interface DcrwalletAccount : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (int32_t)number;
- (void)setNumber:(int32_t)v;
- (NSString*)name;
- (void)setName:(NSString*)v;
- (DcrwalletBalance*)balance;
- (void)setBalance:(DcrwalletBalance*)v;
- (int32_t)external_key_count;
- (void)setExternal_key_count:(int32_t)v;
- (int32_t)internal_key_count;
- (void)setInternal_key_count:(int32_t)v;
- (int32_t)imported_key_count;
- (void)setImported_key_count:(int32_t)v;
@end

@interface DcrwalletAccounts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (long)count;
- (void)setCount:(long)v;
- (NSString*)errorMessage;
- (void)setErrorMessage:(NSString*)v;
- (long)errorCode;
- (void)setErrorCode:(long)v;
- (BOOL)errorOccurred;
- (void)setErrorOccurred:(BOOL)v;
// skipped field Accounts.Acc with unsupported type: *types.Pointer

- (NSData*)current_block_hash;
- (void)setCurrent_block_hash:(NSData*)v;
- (int32_t)current_block_height;
- (void)setCurrent_block_height:(int32_t)v;
@end

@interface DcrwalletBalance : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (int64_t)total;
- (void)setTotal:(int64_t)v;
- (int64_t)spendable;
- (void)setSpendable:(int64_t)v;
- (int64_t)immatureReward;
- (void)setImmatureReward:(int64_t)v;
- (int64_t)immatureStakeGeneration;
- (void)setImmatureStakeGeneration:(int64_t)v;
- (int64_t)lockedByTickets;
- (void)setLockedByTickets:(int64_t)v;
- (int64_t)votingAuthority;
- (void)setVotingAuthority:(int64_t)v;
- (int64_t)unConfirmed;
- (void)setUnConfirmed:(int64_t)v;
@end

@interface DcrwalletConstructTxResponse : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (int32_t)estimatedSignedSize;
- (void)setEstimatedSignedSize:(int32_t)v;
- (int64_t)totalOutputAmount;
- (void)setTotalOutputAmount:(int64_t)v;
- (int64_t)totalPreviousOutputAmount;
- (void)setTotalPreviousOutputAmount:(int64_t)v;
- (NSData*)unsignedTransaction;
- (void)setUnsignedTransaction:(NSData*)v;
- (BOOL)errorOccurred;
- (void)setErrorOccurred:(BOOL)v;
- (NSString*)errorMessage;
- (void)setErrorMessage:(NSString*)v;
- (int32_t)errorCode;
- (void)setErrorCode:(int32_t)v;
@end

@interface DcrwalletTransaction : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)hash;
- (void)setHash:(NSString*)v;
- (NSData*)transaction;
- (void)setTransaction:(NSData*)v;
- (int64_t)fee;
- (void)setFee:(int64_t)v;
- (int64_t)timestamp;
- (void)setTimestamp:(int64_t)v;
- (NSString*)type;
- (void)setType:(NSString*)v;
- (int64_t)amount;
- (void)setAmount:(int64_t)v;
- (NSString*)status;
- (void)setStatus:(NSString*)v;
// skipped field Transaction.Debits with unsupported type: *types.Pointer

// skipped field Transaction.Credits with unsupported type: *types.Pointer

@end

@interface DcrwalletTransactionCredit : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (int32_t)index;
- (void)setIndex:(int32_t)v;
- (int32_t)account;
- (void)setAccount:(int32_t)v;
- (BOOL)internal;
- (void)setInternal:(BOOL)v;
- (int64_t)amount;
- (void)setAmount:(int64_t)v;
- (NSString*)address;
- (void)setAddress:(NSString*)v;
@end

@interface DcrwalletTransactionDebit : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (int32_t)index;
- (void)setIndex:(int32_t)v;
- (int32_t)previousAccount;
- (void)setPreviousAccount:(int32_t)v;
- (int64_t)previousAmount;
- (void)setPreviousAmount:(int64_t)v;
- (NSString*)accountName;
- (void)setAccountName:(NSString*)v;
@end

FOUNDATION_EXPORT NSString* DcrwalletCloseWallet(void);

FOUNDATION_EXPORT BOOL DcrwalletConnectToDcrd(NSString* address, NSData* cert);

FOUNDATION_EXPORT DcrwalletConstructTxResponse* DcrwalletConstructTransaction(NSString* address, int64_t amount, int32_t account);

FOUNDATION_EXPORT NSString* DcrwalletCreateAccount(NSString* accountName, NSString* passPhrase);

FOUNDATION_EXPORT NSString* DcrwalletCreateWallet(NSString* passPhrase, NSString* seedMnemonic);

FOUNDATION_EXPORT NSString* DcrwalletDecodeRawTransaction(NSData* tx, NSError** error);

FOUNDATION_EXPORT NSString* DcrwalletDiscoverAddresses(NSString* privPass);

FOUNDATION_EXPORT void DcrwalletExit(void);

FOUNDATION_EXPORT int32_t DcrwalletFetchHeaders(void);

FOUNDATION_EXPORT NSString* DcrwalletGenerateSeed(void);

// skipped function GetAccount with unsupported parameter or return types


FOUNDATION_EXPORT NSString* DcrwalletGetAccounts(void);

FOUNDATION_EXPORT DcrwalletBalance* DcrwalletGetBalance(long num);

FOUNDATION_EXPORT NSString* DcrwalletGetHomeDir(void);

FOUNDATION_EXPORT NSString* DcrwalletGetTransaction(NSData* txHash, NSError** error);

FOUNDATION_EXPORT NSString* DcrwalletGetTransactions(int32_t blockHeight, int32_t startHeight);

// skipped function IsAddressMine with unsupported parameter or return types


FOUNDATION_EXPORT BOOL DcrwalletIsRunning(void);

FOUNDATION_EXPORT BOOL DcrwalletIsTestNet(void);

FOUNDATION_EXPORT void DcrwalletLoadActiveDataFilters(void);

FOUNDATION_EXPORT void DcrwalletMain(void);

FOUNDATION_EXPORT NSString* DcrwalletNextAddress(long accountNumber);

FOUNDATION_EXPORT NSString* DcrwalletOpenWallet(void);

FOUNDATION_EXPORT BOOL DcrwalletPing(void);

FOUNDATION_EXPORT NSData* DcrwalletPublishTransaction(NSData* tx, NSError** error);

FOUNDATION_EXPORT BOOL DcrwalletPublishUnminedTransactions(NSError** error);

FOUNDATION_EXPORT void DcrwalletReScanBlocks(id<DcrwalletBlockScanResponse> callback, int32_t begin_height);

FOUNDATION_EXPORT NSString* DcrwalletRestoreWallet(NSString* passPhrase, NSString* userInput);

FOUNDATION_EXPORT NSString* DcrwalletRunDcrCommands(NSString* cmd, NSError** error);

FOUNDATION_EXPORT void DcrwalletRunDcrd(void);

FOUNDATION_EXPORT void DcrwalletRunDcrwallet(void);

FOUNDATION_EXPORT NSString* DcrwalletRunUtil(NSError** error);

FOUNDATION_EXPORT void DcrwalletShutdown(void);

FOUNDATION_EXPORT NSData* DcrwalletSignTransaction(NSData* tx, NSString* passphrase, NSError** error);

FOUNDATION_EXPORT NSString* DcrwalletSubscibeToBlockNotifications(void);

FOUNDATION_EXPORT BOOL DcrwalletTestConnect(void);

FOUNDATION_EXPORT NSString* DcrwalletVerifySeed(NSString* seedMnemonic);

FOUNDATION_EXPORT NSString* DcrwalletWalletExists(void);

@class DcrwalletBlockScanResponse;

@class DcrwalletTransactionListener;

@interface DcrwalletBlockScanResponse : NSObject <goSeqRefInterface, DcrwalletBlockScanResponse> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onEnd:(long)height;
- (void)onScan:(long)rescanned_through;
@end

@interface DcrwalletTransactionListener : NSObject <goSeqRefInterface, DcrwalletTransactionListener> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onTransactionReceived;
@end

#endif
